package armotypes

import (
	"time"

	"github.com/armosec/armoapi-go/identifiers"
)

type VulnerabilityExceptionPolicyActions string

const Ignore VulnerabilityExceptionPolicyActions = "ignore"

/*
swagger:route POST /api/v1/vulnerabilityExceptionPolicy
Create vulnerability exceptions.

### Query params
`customerGUID` - required

### Request object
Desired vulnerability exception policy as described in Vulnerability Exceptions https://hub.armosec.io/reference/exceptions-1

#### Required fields
`policyType`
`name`
`actions`
`designators`
`vulnerabilities`

### Bulk
It is possible to create multiple exceptions for multiple vulnerabilities.

#### Query params
In addition to the previous query parameters
`bulk` - true
`actions` - the same actions from the exception policy object

#### Request object
Standart response body for pagination APIs (https://docs.cyberarmor.io/api/v2-pagination-api#response-object) as would be given to
`/api/v1/vulnerability/scanResultsSumSummary`

#### Naming convention
The exceptions that have been created using the bulk will have names according to the convention of `(WORKLOAD HASH)_(VULNERABILITY NAME)_(ACTIONS)`
*/

/*
swagger:route GET /api/v1/vulnerabilityExceptionPolicy
Get an exception policy object or list of objects

### Query params
`customerGUID` - required, Get a list of all policies of the given customer
`policyName` - Get a specific policy by name
`policyGUID` - Get a specific policy by GUID
`list` - Get just a list of names of exceptions of current customer

#### Filtering
It is possible to filter the policies by their properties using query parameters. For example `vulnerabilities.name=CVE-example`.
It is possible to filter by scope using `scope.PROPERTY` query parameter. For example `scope.cluster=cluster-name`.
Multiple filters are possible

### Examples
Get all exceptions of the customer
`/api/v1/vulnerabilityExceptionPolicy?customerGUID=31fb54a9-6e8f-4289-8506-f4e875ac19f7`

Get filtered exceptions of the customer
`/api/v1/vulnerabilityExceptionPolicy?customerGUID=31fb54a9-6e8f-4289-8506-f4e875ac19f7&scope.cluster=cluster-name&scope.namespace&vulnerabilities.name=CVE-name`
`/api/v1/vulnerabilityExceptionPolicy?customerGUID=31fb54a9-6e8f-4289-8506-f4e875ac19f7&name=exceptionPolicyName`

Get specific policy
`/api/v1/vulnerabilityExceptionPolicy?customerGUID=31fb54a9-6e8f-4289-8506-f4e875ac19f7&policyName=vul_example_name`
`/api/v1/vulnerabilityExceptionPolicy?customerGUID=31fb54a9-6e8f-4289-8506-f4e875ac19f7&policyGUID=31fb54a9-6e8f-4289-8506-f4e875ac19f7`
*/

/*
swagger:route PUT /api/v1/vulnerabilityExceptionPolicy
Update an existing exception.

### Query params
`customerGUID` - required

### Request object
The new desired vulnerability exception policy as described in Vulnerability Exceptions (https://hub.armosec.io/reference/exceptions-1).

#### Required fields
`policyType`
`name`
`actions`
`designators`
`vulnerabilities`
*/

/*
swagger:route DELETE /api/v1/vulnerabilityExceptionPolicy
Delete vulnerability exceptions.

### Query params
`customerGUID` - required
`policyName` - Can appear multiple times to delete multiple policies

### Bulk
It is possible to delete multiple exceptions for multiple vulnerabilities.

#### Query params
In addition to customerGUID.
`bulk` - true

#### Request object
Standart response body for pagination APIs (https://docs.cyberarmor.io/api/v2-pagination-api#response-object) as would be given to
`/api/v1/vulnerability/scanResultsSumSummary`

#### Naming convention
The operation will delete only exceptions that have been named according to the convention of `(WORKLOAD HASH)_(VULNERABILITY NAME)_(ACTIONS)`
*/
type VulnerabilityExceptionPolicy struct {
	PortalBase `json:",inline" bson:"inline"`

	// Policy type. Must be 'vulnerabilityExceptionPolicy'
	// required: true
	// Example: vulnerabilityExceptionPolicy
	PolicyType string `json:"policyType,omitempty" bson:"policyType,omitempty"`

	// Creation time of the policy
	// Example: 2022-03-31T08:57:58.048014
	CreationTime string `json:"creationTime" bson:"creationTime"`

	// Actions to apply (currently only 'ignore' is available)
	// required: true
	// min: 1
	// Example: ["ignore"]
	Actions []VulnerabilityExceptionPolicyActions `json:"actions" bson:"actions,omitempty"`

	// Items to apply the actions on
	// required: true
	// min: 1
	Designatores []identifiers.PortalDesignator `json:"designators" bson:"designators,omitempty"`

	// Vulnerabilities to take the actions on
	// required: true
	// min: 1
	VulnerabilityPolicies []VulnerabilityPolicy `json:"vulnerabilities" bson:"vulnerabilities,omitempty"`
	Reason                string                `json:"reason,omitempty" bson:"reason,omitempty"`
	ExpirationDate        *time.Time            `json:"expirationDate,omitempty" bson:"expirationDate,omitempty"`
	ExpiredOnFix          *bool                 `json:"expiredOnFix,omitempty" bson:"expiredOnFix,omitempty"`
	CreatedBy             string                `json:"createdBy,omitempty" bson:"createdBy,omitempty"`
}

type VulnerabilityPolicy struct {
	// The name of the vulnerability
	// Example: CVE-2022-28128
	Name string `json:"name" bson:"name"`
}

func (exceptionPolicy *VulnerabilityExceptionPolicy) IsAlertOnly() bool {
	for i := range exceptionPolicy.Actions {
		if exceptionPolicy.Actions[i] == Ignore {
			return true
		}
	}
	return false
}
