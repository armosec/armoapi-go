package armotypes

import (
	"time"
)

const (
	ExploitableCisaKev        = "Known Exploited"
	ExploitableHighLikelihood = "High Likelihood"
	ExploitableNo             = "No"
	EpssThreshold             = 0.10 // 10%
	CisaKevKnown              = "Known"
	CisaKevUnknown            = "Unknown"
)

type VulnerabilityJobParams struct {
	Name            string `json:"name,omitempty"`
	ID              string `json:"id,omitempty"`
	ClusterName     string `json:"clusterName"`
	Namespace       string `json:"namespace"`
	CronTabSchedule string `json:"cronTabSchedule,omitempty"`
	JobID           string `json:"jobID,omitempty"`
}

type VulnerabilityWorkload struct {
	Wlid                     string                   `json:"wlid"`
	ResourceHash             string                   `json:"resourceHash"` //common hash of customerGUID, cluster, kind, name, namespace, apiVersion
	Name                     string                   `json:"name"`         // deprecated
	Workload                 string                   `json:"workload"`     // workload name (replaced 'name' field)
	Namespace                string                   `json:"namespace"`
	Kind                     string                   `json:"kind"`
	Cluster                  string                   `json:"cluster"`
	ClusterShortName         string                   `json:"clusterShortName"`
	LastScanTime             time.Time                `json:"lastScanTime"`
	CustomerGUID             string                   `json:"customerGUID"`
	ImagesCount              int                      `json:"imagesCount"`
	CriticalCount            int                      `json:"criticalCount"`
	HighCount                int                      `json:"highCount"`
	MediumCount              int                      `json:"mediumCount"`
	LowCount                 int                      `json:"lowCount"`
	UnknownCount             int                      `json:"unknownCount"`
	SeverityStats            map[string][]string      `json:"severityStats"`
	RiskFactorsCount         int                      `json:"riskFactorsCount"`
	RiskFactors              []RiskFactor             `json:"riskFactors"`
	Labels                   []string                 `json:"labels"`
	HasRelevancyData         bool                     `json:"hasRelevancyData"`
	Images                   []string                 `json:"images"`
	Tickets                  []Ticket                 `json:"tickets,omitempty"`
	MissingRuntimeInfoReason MissingRuntimeInfoReason `json:"missingRuntimeInfoReason"`
	TicketsCount             int                      `json:"ticketsCount,omitempty"`
}

type ContainerPathInfo struct {
	NameSpace        string `json:"namespace"`
	WorkloadName     string `json:"workloadName"`
	ContainerName    string `json:"containerName"`
	WorkloadKind     string `json:"workloadKind"`
	WorkloadHash     string `json:"workloadHash"`
	WLID             string `json:"wlid"`
	ClusterName      string `json:"clusterName"`
	ClusterShortName string `json:"clusterShortName"`
}

type ComponentSummary struct {
	CustomerGUID    string              `json:"customerGUID"`
	Name            string              `json:"name"`
	Version         string              `json:"version"`
	PackageType     string              `json:"packageType"`
	Paths           []string            `json:"paths"`
	FixVersions     []string            `json:"fixVersions"`
	Licenses        []string            `json:"licenses"`
	CriticalCount   int                 `json:"criticalCount"`
	HighCount       int                 `json:"highCount"`
	MediumCount     int                 `json:"mediumCount"`
	LowCount        int                 `json:"lowCount"`
	UnknownCount    int                 `json:"unknownCount"`
	ClustersCount   int                 `json:"clustersCount"`
	NamespacesCount int                 `json:"namespacesCount"`
	WorkloadsCount  int                 `json:"workloadsCount"`
	ImagesCount     int                 `json:"imagesCount"`
	SeverityStats   map[string][]string `json:"severityStats"`
	Tickets         []Ticket            `json:"tickets,omitempty"`
	TicketsCount    int                 `json:"ticketsCount,omitempty"`
}

type ImageSummary struct {
	CustomerGUID    string              `json:"customerGUID"`
	Tag             string              `json:"tag"`
	Digest          string              `json:"digest"`
	Registry        string              `json:"registry"`
	Repository      string              `json:"repository"`
	Architecture    string              `json:"architecture"`
	OS              string              `json:"os"`
	Size            uint64              `json:"size"`
	BaseImage       string              `json:"baseImage"`
	LastScanTime    time.Time           `json:"lastScanTime"`
	Clusters        []string            `json:"clusters"`
	Namespaces      []string            `json:"namespaces"`
	Workloads       []string            `json:"workloads"`
	Kinds           []string            `json:"kinds"`
	Containers      []string            `json:"containers"`
	SeverityStats   map[string][]string `json:"severityStats"`
	CriticalCount   int                 `json:"criticalCount"`
	HighCount       int                 `json:"highCount"`
	MediumCount     int                 `json:"mediumCount"`
	LowCount        int                 `json:"lowCount"`
	UnknownCount    int                 `json:"unknownCount"`
	ClustersCount   int                 `json:"clustersCount"`
	NamespacesCount int                 `json:"namespacesCount"`
	WorkloadsCount  int                 `json:"workloadsCount"`
	ContainersCount int                 `json:"containersCount"`
	Tickets         []Ticket            `json:"tickets,omitempty"`
	TicketsCount    int                 `json:"ticketsCount,omitempty"`
}

type BaseImage struct {
	DisplayName          string       `json:"displayName"`
	Command              string       `json:"command"`
	Size                 uint64       `json:"size"`
	HighestSeverityFound string       `json:"highestSeverityFound,omitempty"`
	Layers               []ImageLayer `json:"layers,omitempty"`
}

type ImageLayer struct {
	Order                int    `json:"order"`
	Hash                 string `json:"hash,omitempty"`
	Command              string `json:"command"`
	Size                 uint64 `json:"size"`
	HighestSeverityFound string `json:"highestSeverityFound,omitempty"`
}

type VulnerabilitiesComponent struct {
	CustomerGUID string `json:"customerGUID"`
	Name         string `json:"name"`
	Version      string `json:"version"`
	PackageType  string `json:"packageType"`
	// swagger:ignore
	FirstSeen   time.Time           `json:"firstSeen"` //first found in the user account (not in the world)
	FixVersions []string            `json:"fixVersions"`
	PathsInfo   []ComponentPathInfo `json:"pathsInfo"`
}

type ComponentPathInfo struct {
	ContainerPathInfo
	ImageTag   string   `json:"imageTag"`
	ImageHash  string   `json:"imageHash"`
	IsRelevant string   `json:"isRelevant"`
	Paths      []string `json:"paths"`
}

type Vulnerability struct {
	Name               string                       `json:"name"`
	UniqueFindingID    int64                        `json:"uniqueFindingID"`
	ID                 string                       `json:"id"`
	Severity           string                       `json:"severity"`
	SeverityScore      int                          `json:"severityScore"`
	Links              []string                     `json:"links"`
	Description        string                       `json:"description"`
	Exploitable        string                       `json:"exploitable"`
	IsRelevant         string                       `json:"isRelevant"`
	DiscoveredDate     time.Time                    `json:"discoveredDate"`
	ComponentInfo      VulnerabilitiesComponent     `json:"componentInfo"`
	CvssInfo           CvssInfo                     `json:"cvssInfo"`
	EpssInfo           EpssInfo                     `json:"epssInfo"`
	CisaKevInfo        CisaKevInfo                  `json:"cisaKevInfo"`
	WorkloadsCount     int                          `json:"workloadsCount"`
	ImagesCount        int                          `json:"imagesCount"`
	IgnoreRulesSummary map[string]IgnoreRuleSummary `json:"ignoreRulesSummary"`
	Tickets            []Ticket                     `json:"tickets,omitempty"`
	HasTickets         bool                         `json:"hasTickets,omitempty"`
	TicketsCount       int                          `json:"ticketsCount,omitempty"`
}

type CvssInfo struct {
	BaseScore    float64 `json:"baseScore" bson:"baseScore"`
	ScoreVersion string  `json:"scoreVersion" bson:"scoreVersion"`
	Severity     string  `json:"severity" bson:"severity"`
	CVSS         []Cvss  `json:"cvss" bson:"cvss"`
}

type Cvss struct {
	Vector              string                 `json:"vector"`
	Version             string                 `json:"version"`
	Source              string                 `json:"source"`
	BaseScore           float64                `json:"baseScore"`
	ExploitabiltiyScore float64                `json:"exploitabilityScore"`
	ImpactScore         float64                `json:"impactScore"`
	ExploitabilityInfo  CvssExploitabilityInfo `json:"exploitabilityInfo"`
	ImpactInfo          CvssImpactInfo         `json:"impactInfo"`
}

type CvssExploitabilityInfo struct {
	AttackVector       string `json:"attackVector,omitempty"`
	AccessVector       string `json:"accessVector,omitempty"`
	AttackComplexity   string `json:"attackComplexity,omitempty"`
	AccessComplexity   string `json:"accessComplexity,omitempty"`
	Authentication     string `json:"authentication,omitempty"`
	PrivilegesRequired string `json:"privilegesRequired,omitempty"`
	UserInteraction    string `json:"userInteraction,omitempty"`
	Scope              string `json:"scope,omitempty"`
}

type CvssImpactInfo struct {
	Confidentiality string `json:"confidentiality,omitempty"`
	Integrity       string `json:"integrity,omitempty"`
	Availability    string `json:"availability,omitempty"`
}

type EpssInfo struct {
	Epss       float64 `json:"epss" bson:"epss"`
	Percentile float64 `json:"percentile" bson:"percentile"`
	Date       string  `json:"date" bson:"date"`
}

type CisaKevInfo struct {
	DateAdded                  string `json:"dateAdded" bson:"dateAdded"`
	DueDate                    string `json:"dueDate" bson:"dueDate"`
	KnownRansomwareCampaignUse string `json:"knownRansomwareCampaignUse" bson:"knownRansomwareCampaignUse"`
	Notes                      string `json:"notes" bson:"notes"`
}

type IgnoreRuleSummary struct {
	NumberOfSystemRules int      `json:"numberOfSystemRules"`
	IgnoreRulesIDs      []string `json:"ignoreRulesIDs"`
}

type VulnerabilityUniqueFinding struct {
	CustomerGUID     string    `json:"customerGUID"`
	SeverityScore    int64     `json:"severityScore"`
	VulnerabilityID  string    `json:"vulnerabilityID"`
	Component        string    `json:"component"`
	ComponentVersion string    `json:"componentVersion"`
	FixAvailable     *bool     `json:"fixAvailable"`
	ResourceHash     string    `json:"resourceHash"`
	IsRelevant       bool      `json:"isRelevant"`
	ScanDate         time.Time `json:"scanDate"`
}

type VulnerabilityUniqueDailyFindings struct {
	Timestamp     time.Time `json:"timestamp"`
	CriticalCount int       `json:"criticalCount"`
	HighCount     int       `json:"highCount"`
	MediumCount   int       `json:"mediumCount"`
	LowCount      int       `json:"lowCount"`
	UnknownCount  int       `json:"unknownCount"`
}

type VulnerabilityUniqueComponent struct {
	CustomerGUID     string `json:"customerGUID"`
	ComponentID      uint64 `json:"componentID"`
	Component        string `json:"component"`
	ComponentVersion string `json:"componentVersion"`
	PackageType      string `json:"packageType"`
}
