package armotypes

import (
	"strings"
	"time"
)

const (
	ExploitableCisaKev        = "Known Exploited (CISA KEV)"
	ExploitableHighLikelihood = "High likelihood (EPSS >= 10%)"
	ExploitableNo             = "No"
	EpssThreshold             = 0.10 // 10%
)

type VulnerabilityJobParams struct {
	Name            string `json:"name,omitempty"`
	ID              string `json:"id,omitempty"`
	ClusterName     string `json:"clusterName"`
	Namespace       string `json:"namespace"`
	CronTabSchedule string `json:"cronTabSchedule,omitempty"`
	JobID           string `json:"jobID,omitempty"`
}

type VulnerabilityWorkload struct {
	Wlid             string                     `json:"wlid"`
	Name             string                     `json:"name"`
	Namespace        string                     `json:"namespace"`
	Kind             string                     `json:"kind"`
	ClusterName      string                     `json:"clusterName"`
	ClusterShortName string                     `json:"clusterShortName"`
	CustomerGUID     string                     `json:"customerGUID"`
	ImagesCount      int                        `json:"imagesCount"`
	SeverityStats    map[string]SeverityDetails `json:"severityStats"`
	RiskFactors      []RiskFactor               `json:"riskFactors"`
	Labels           []string                   `json:"labels"`
}

type SeverityDetails struct {
	Total   int             `json:"total"`
	TopCves []TopCveDetails `json:"topCves"`
}

type TopCveDetails struct {
	Name string `json:"name"`
}

type VulnerabilitiesImage struct {
	ImageTag      string                     `json:"imageTag"`
	ImageHash     string                     `json:"imageHash"`
	ContainerName string                     `json:"containerName"`
	Registry      string                     `json:"registry"`
	LastScan      time.Time                  `json:"lastScan"`
	PathsInfo     []ImagePathInfo            `json:"pathsInfo"`
	CustomerGUID  string                     `json:"customerGUID"`
	SeverityStats map[string]SeverityDetails `json:"severityStats"`
}

type ImagePathInfo struct {
	WorkloadId       string `json:"wlid"`
	NameSpace        string `json:"namespace"`
	ClusterName      string `json:"clusterName"`
	ClusterShortName string `json:"clusterShortName"`
}

type VulnerabilitiesComponent struct {
	CustomerGUID  string                     `json:"customerGUID"`
	Name          string                     `json:"name"`
	Version       string                     `json:"version"`
	PackageType   string                     `json:"packageType"`
	FixVersions   []string                   `json:"fixVersions"`
	PathsInfo     []ComponentPathInfo        `json:"pathsInfo"`
	SeverityStats map[string]SeverityDetails `json:"severityStats"`
}

type ComponentPathInfo struct {
	ImagePathInfo
	ImageTag      string `json:"imageTag"`
	ImageHash     string `json:"imageHash"`
	ContainerName string `json:"containerName"`
}

type Vulnerability struct {
	Id             string                     `json:"id"`
	Name           string                     `json:"name"`
	SeverityScore  int                        `json:"severityScore"`
	IsRCE          bool                       `json:"isRCE"`
	Links          []string                   `json:"links"`
	Description    string                     `json:"description"`
	Exploitable    string                     `json:"exploitable"`
	ComponentsInfo []VulnerabilitiesComponent `json:"componentsInfo"`
	IsFixable      bool                       `json:"isFixable"`
	CvssInfo       []CvssInfo                 `json:"cvssInfo"`
	EpssInfo       EpssInfo                   `json:"epssInfo"`
	CisaKevInfo    CisaKevInfo                `json:"cisaKevInfo"`
}

type CvssInfo struct {
	Vector              string                 `json:"vector"`
	Version             string                 `json:"version"`
	Source              string                 `json:"source"`
	BaseScore           int                    `json:"baseScore"`
	ExploitabiltiyScore int                    `json:"exploitabiltiyScore"`
	ImpactScore         int                    `json:"ImpactScore"`
	ExploitabilityInfo  CvssExploitabilityInfo `json:"exploitabilityInfo"`
	ImpactInfo          CvssImpactInfo         `json:"impactInfo"`
}

type CvssExploitabilityInfo struct {
	AttackVector       string `json:"attackVector"`
	AttackComplexity   string `json:"attackComplexity"`
	PrivilegesRequired string `json:"privilegesRequired"`
	UserInteraction    string `json:"userInteraction"`
	Scope              string `json:"scope"`
}

type CvssImpactInfo struct {
	Confidentiality string `json:"confidentiality"`
	Integrity       string `json:"integrity"`
	Availability    string `json:"availability"`
}

type EpssInfo struct {
	Epss       float64 `json:"epss"`
	Percentile float64 `json:"percentile"`
	Date       string  `json:"date"`
}

type CisaKevInfo struct {
	// todo : verify tooltip and additional feilds
	Date time.Time `json:"date"`
}

// EnrichCVSSData enriches the CVSS data by parsing the CVSS vector and updating the exploitability field
func EnrichCVSSData(vuln *Vulnerability) {
	if vuln == nil || len(vuln.CvssInfo) == 0 {
		return
	}
	// Parse CVSS Vector
	for _, cvssInfo := range vuln.CvssInfo {
		if cvssInfo.Vector != "" {
			ParseCVSSVector(&cvssInfo)
		}
	}
	// Update Exploitable Field
	UpdateExploitableField(vuln)
}

// ParseCVSSVector parses the CVSS vector string into the CvssInfo struct
func ParseCVSSVector(cvssInfo *CvssInfo) {
	if cvssInfo.Vector == "" {
		return
	}

	vectorComponents := strings.Split(cvssInfo.Vector, "/")

	for _, component := range vectorComponents {
		switch {
		case strings.HasPrefix(component, "AV:"):
			cvssInfo.ExploitabilityInfo.AttackVector = strings.TrimPrefix(component, "AV:")
		case strings.HasPrefix(component, "AC:"):
			cvssInfo.ExploitabilityInfo.AttackComplexity = strings.TrimPrefix(component, "AC:")
		case strings.HasPrefix(component, "PR:"):
			cvssInfo.ExploitabilityInfo.PrivilegesRequired = strings.TrimPrefix(component, "PR:")
		case strings.HasPrefix(component, "UI:"):
			cvssInfo.ExploitabilityInfo.UserInteraction = strings.TrimPrefix(component, "UI:")
		case strings.HasPrefix(component, "S:"):
			cvssInfo.ExploitabilityInfo.Scope = strings.TrimPrefix(component, "S:")
		case strings.HasPrefix(component, "C:"):
			cvssInfo.ImpactInfo.Confidentiality = strings.TrimPrefix(component, "C:")
		case strings.HasPrefix(component, "I:"):
			cvssInfo.ImpactInfo.Integrity = strings.TrimPrefix(component, "I:")
		case strings.HasPrefix(component, "A:"):
			cvssInfo.ImpactInfo.Availability = strings.TrimPrefix(component, "A:")
		}
	}
	return
}

// UpdateExploitableField determines the exploitability status of a vulnerability
func UpdateExploitableField(vuln *Vulnerability) {
	if vuln == nil {
		return
	}

	// Check CISA KEV status
	if !vuln.CisaKevInfo.Date.IsZero() {
		vuln.Exploitable = ExploitableCisaKev
	} else if vuln.EpssInfo.Epss >= EpssThreshold {
		vuln.Exploitable = ExploitableHighLikelihood
	} else {
		vuln.Exploitable = ExploitableNo
	}
}
