package armotypes

import (
	"strings"
	"time"
)

type VulnerabilityJobParams struct {
	Name            string `json:"name,omitempty"`
	ID              string `json:"id,omitempty"`
	ClusterName     string `json:"clusterName"`
	Namespace       string `json:"namespace"`
	CronTabSchedule string `json:"cronTabSchedule,omitempty"`
	JobID           string `json:"jobID,omitempty"`
}

type VulnerabilityWorkload struct {
	Id               string                     `json:"id"`
	Name             string                     `json:"name"`
	Namespace        string                     `json:"namespace"`
	Type             string                     `json:"type"`
	ClusterName      string                     `json:"clusterName"`
	ClusterShortName string                     `json:"clusterShortName"`
	CustomerGUID     string                     `json:"customerGUID"`
	ImagesCount      int                        `json:"imagesCount"`
	SeverityStats    map[string]SeverityDetails `json:"severityStats"`
	RiskFactors      []RiskFactor               `json:"riskFactors"`

	// todo : Vulnerabilities []Vulnerability `json:"vulnerabilities"`

	// todo: Labels []string `json:"labels"`
}

type SeverityDetails struct {
	Total   int             `json:"total"`
	TopCves []TopCveDetails `json:"topCves"`
}

type TopCveDetails struct {
	Name string `json:"name"`
}

type VulnerabilitiesImage struct {
	ImageTag         string                     `json:"imageTag"`
	ImageHash        string                     `json:"imageHash"`
	ContainerName    string                     `json:"containerName"`
	Registry         string                     `json:"registry"`
	WorkloadsIds     []string                   `json:"wlids"`
	NameSpace        string                     `json:"namespace"`
	LastScan         time.Time                  `json:"lastScan"`
	ClusterName      string                     `json:"clusterName"`
	ClusterShortName string                     `json:"clusterShortName"`
	CustomerGUID     string                     `json:"customerGUID"`
	SeverityStats    map[string]SeverityDetails `json:"severityStats"`
}

// todo : check + rename
type VulnerabilitiesComponent struct {
	ImageTag         string                     `json:"imageTag"`
	ImageHash        string                     `json:"imageHash"`
	ContainerName    string                     `json:"containerName"`
	Registry         string                     `json:"registry"`
	WorkloadsIds     []string                   `json:"wlids"`
	NameSpace        string                     `json:"namespace"`
	LastScan         time.Time                  `json:"lastScan"`
	ClusterName      string                     `json:"clusterName"`
	ClusterShortName string                     `json:"clusterShortName"`
	CustomerGUID     string                     `json:"customerGUID"`
	SeverityStats    map[string]SeverityDetails `json:"severityStats"`
	Paths            []string                   `json:"paths"`
}

type Vulnerability struct {
	Id            string   `json:"id"`
	Name          string   `json:"name"`
	SeverityScore int      `json:"severityScore"`
	IsRCE         bool     `json:"isRCE"`
	Links         []string `json:"links"`
	Description   string   `json:"description"`
	// todo : verify we break nothing once we add these fields
	//todo : vuln id
	ComponentsInfo []CveComponentsInfo
	IsFixable      bool       `json:"isFixable"`
	CvssInfo       []CvssInfo `json:"cvssInfo"`
}

type CveComponentsInfo struct {
	Name           string   `json:"name"`
	Version        string   `json:"version"`
	PackageType    string   `json:"packageType"`
	Paths          []string `json:"paths"`
	AffectedImages []string `json:"affected_images"`
}
type CvssInfo struct {
	Vector              string                 `json:"vector"`
	Version             string                 `json:"version"`
	Source              string                 `json:"source"`
	BaseScore           int                    `json:"baseScore"`
	ExploitabiltiyScore int                    `json:"exploitabiltiyScore"`
	ImpactScore         int                    `json:"ImpactScore"`
	ExpolitabilityInfo  CvssExploitabilityInfo `json:"exploitabilityInfo"`
	ImpactInfo          CvssImpactInfo         `json:"impactInfo"`
}

type CvssExploitabilityInfo struct {
	AttackVector       string `json:"attackVector"`
	AttackComplexity   string `json:"attackComplexity"`
	PrivilegesRequired string `json:"privilegesRequired"`
	UserInteraction    string `json:"userInteraction"`
	Scope              string `json:"scope"`
}

type CvssImpactInfo struct {
	Confidentiality string `json:"confidentiality"`
	Integrity       string `json:"integrity"`
	Availability    string `json:"availability"`
}

// EnrichCVSSData adds cvss vector breakdown to the cvss data
func EnrichCVSSData(cvssInfo *CvssInfo) {
	if cvssInfo == nil || cvssInfo.Vector == "" {
		return
	}
	vectorComponents := strings.Split(cvssInfo.Vector, "/")

	for _, component := range vectorComponents {
		switch {
		case strings.HasPrefix(component, "AV:"):
			cvssInfo.ExpolitabilityInfo.AttackVector = strings.TrimPrefix(component, "AV:")
		case strings.HasPrefix(component, "AC:"):
			cvssInfo.ExpolitabilityInfo.AttackComplexity = strings.TrimPrefix(component, "AC:")
		case strings.HasPrefix(component, "PR:"):
			cvssInfo.ExpolitabilityInfo.PrivilegesRequired = strings.TrimPrefix(component, "PR:")
		case strings.HasPrefix(component, "UI:"):
			cvssInfo.ExpolitabilityInfo.UserInteraction = strings.TrimPrefix(component, "UI:")
		case strings.HasPrefix(component, "S:"):
			cvssInfo.ExpolitabilityInfo.Scope = strings.TrimPrefix(component, "S:")
		case strings.HasPrefix(component, "C:"):
			cvssInfo.ImpactInfo.Confidentiality = strings.TrimPrefix(component, "C:")
		case strings.HasPrefix(component, "I:"):
			cvssInfo.ImpactInfo.Integrity = strings.TrimPrefix(component, "I:")
		case strings.HasPrefix(component, "A:"):
			cvssInfo.ImpactInfo.Availability = strings.TrimPrefix(component, "A:")
		}
	}
	return
}
