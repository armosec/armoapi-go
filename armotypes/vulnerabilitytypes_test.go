package armotypes

import (
	"testing"
	"time"
)

func TestParseCVSSVector(t *testing.T) {
	cases := []struct {
		Vector               string
		ExpectedAttackVector string
	}{
		{"AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "N"},
		{"AV:A/AC:H/PR:H/UI:R/S:C/C:L/I:L/A:N", "A"},
		{"", ""},
	}

	for _, c := range cases {
		cvssInfo := CvssInfo{Vector: c.Vector}
		ParseCVSSVector(&cvssInfo)
		if cvssInfo.ExploitabilityInfo.AttackVector != c.ExpectedAttackVector {
			t.Errorf("ParseCVSSVector(%s): expected %s, got %s", c.Vector, c.ExpectedAttackVector, cvssInfo.ExploitabilityInfo.AttackVector)
		}
	}
}

func TestUpdateExploitableField(t *testing.T) {
	cases := []struct {
		Epss                float64
		CisaKevDate         time.Time
		ExpectedExploitable string
	}{
		{0.11, time.Time{}, ExploitableHighLikelihood},
		{0.05, time.Now(), ExploitableCisaKev},
		{0.05, time.Time{}, ExploitableNo},
	}

	for _, c := range cases {
		vuln := Vulnerability{
			EpssInfo:    EpssInfo{Epss: c.Epss},
			CisaKevInfo: CisaKevInfo{Date: c.CisaKevDate},
		}
		UpdateExploitableField(&vuln)
		if vuln.Exploitable != c.ExpectedExploitable {
			t.Errorf("UpdateExploitableField: expected %s, got %s", c.ExpectedExploitable, vuln.Exploitable)
		}
	}
}

func TestEnrichCVSSData(t *testing.T) {
	cases := []struct {
		CvssInfos            []CvssInfo
		ExpectedAttackVector string
	}{
		{[]CvssInfo{{Vector: "AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"}}, "N"},
		{[]CvssInfo{{Vector: ""}}, ""},
		{nil, ""},
		{[]CvssInfo{{Vector: "wrong_vector"}}, ""},
	}

	for _, c := range cases {
		vuln := &Vulnerability{CvssInfo: c.CvssInfos}
		EnrichCVSSData(vuln)
		if len(vuln.CvssInfo) > 0 && vuln.CvssInfo[0].ExploitabilityInfo.AttackVector != c.ExpectedAttackVector {
			t.Errorf("EnrichCVSSData: expected %s, got %s", c.ExpectedAttackVector, vuln.CvssInfo[0].ExploitabilityInfo.AttackVector)
		}
	}
}
